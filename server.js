// Generated by CoffeeScript 1.7.1
(function() {
  var Beacon, Contact, Log, MobileApp, Notification, Q, Zone, app, bodyParser, express, mongoose, port, router, util, _;

  express = require('express');

  bodyParser = require('body-parser');

  mongoose = require('mongoose');

  Log = require('./app/models/log');

  MobileApp = require('./app/models/mobile_app');

  Beacon = require('./app/models/beacon');

  Zone = require('./app/models/zone');

  Contact = require('./app/models/contact');

  Notification = require('./app/models/notification');

  _ = require('lodash-node');

  Q = require('q');

  util = require('util');

  app = express();

  app.use(bodyParser.urlencoded());

  app.use(bodyParser.json());

  port = process.env.PORT || 8080;

  router = express.Router();

  app.all('*', function(req, res, next) {
    res.header('Access-Control-Allow-Origin', "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With, Content-Type");
    return next();
  });

  router.use(function(req, res, next) {
    console.log('something is happening.');
    return next();
  });

  router.get('/', function(req, res) {
    return res.json({
      message: 'welcome to appbuilder api'
    });
  });

  router.route('/logs').post(function(req, res) {
    var log;
    log = new Log();
    log._id = mongoose.Types.ObjectId().toHexString();
    log.uuid = req.body.uuid;
    log.major = req.body.major;
    log.minor = req.body.minor;
    log.deviceId = req.body.deviceId;
    log.appKey = req.body.appKey;
    log.time = req.body.time;
    return log.save(function(error) {
      if (error) {
        res.send(error);
      }
      return res.json({
        message: 'Log created!'
      });
    });
  }).get(function(req, res) {
    return Log.find(function(error, logs) {
      if (error) {
        return res.send(error);
      } else {
        return res.json({
          logs: logs
        });
      }
    });
  });

  router.route('/contacts').post(function(req, res) {
    var contact;
    contact = new Contact();
    contact._id = mongoose.Types.ObjectId().toHexString();
    contact.name = req.body.name;
    contact.email = req.body.email;
    contact.message = req.body.message;
    return contact.save(function(error) {
      if (error) {
        res.send(error);
      }
      return res.json({
        message: 'contact created!'
      });
    });
  });

  router.route('/mobile_apps/:appKey').get(function(req, res) {
    var d, getBeacons, getMobileApp, getNotifications, getZones;
    d = Q.defer();
    getMobileApp = MobileApp.findOne({
      appKey: req.params.appKey
    }).lean().select('zones').exec();
    getZones = function(mobileApp) {
      return Zone.where('_id')["in"](mobileApp.zones).lean().exec();
    };
    getBeacons = function(zones) {
      return Beacon.where('zones')["in"](zones).lean().select('uuid major minor zones _id').exec();
    };
    getNotifications = Notification.where('appKey').equals(req.params.appKey).where('type').equals('location').lean().select('action url zone').exec();
    return Q.all([getMobileApp.then(getZones).then(getBeacons), getNotifications]).spread(function(beacons, notifications) {
      var b, filteredBeacons, idx, n, _i, _j, _len, _len1;
      for (_i = 0, _len = notifications.length; _i < _len; _i++) {
        n = notifications[_i];
        filteredBeacons = _.where(beacons, {
          zones: [n.zone]
        });
        for (_j = 0, _len1 = filteredBeacons.length; _j < _len1; _j++) {
          b = filteredBeacons[_j];
          idx = _.findIndex(beacons, function(beacon) {
            return b._id === beacon._id;
          });
          if (!b.actions) {
            beacons[idx] = _.extend(b, {
              actions: [
                {
                  action: n.action,
                  url: n.url
                }
              ]
            });
          } else {
            b.actions.push({
              action: n.action,
              url: n.url
            });
            beacons[idx] = b;
          }
        }
      }
      beacons = _.map(beacons, function(beacon) {
        return _.pick(beacon, ['uuid', 'major', 'minor', 'actions']);
      });
      return res.json({
        beacons: beacons
      });
    });
  });

  app.use('/api', router);

  app.listen(port);

  console.log('running on port ' + port);

}).call(this);

//# sourceMappingURL=server.map
