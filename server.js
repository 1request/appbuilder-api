// Generated by CoffeeScript 1.7.1
(function() {
  var Beacon, Contact, Log, MobileApp, Notification, PushToken, Q, Zone, app, bodyParser, express, mongoose, port, router, util, _;

  express = require('express');

  bodyParser = require('body-parser');

  mongoose = require('mongoose');

  _ = require('lodash-node');

  Q = require('q');

  util = require('util');

  Log = require('./app/models/log');

  MobileApp = require('./app/models/mobile_app');

  Beacon = require('./app/models/beacon');

  Zone = require('./app/models/zone');

  Contact = require('./app/models/contact');

  Notification = require('./app/models/notification');

  PushToken = require('./app/models/push_token');

  app = express();

  app.use(bodyParser.urlencoded());

  app.use(bodyParser.json());

  port = process.env.PORT || 8080;

  router = express.Router();

  app.all('*', function(req, res, next) {
    res.header('Access-Control-Allow-Origin', "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With, Content-Type");
    return next();
  });

  router.use(function(req, res, next) {
    console.log('something is happening.');
    return next();
  });

  router.get('/', function(req, res) {
    return res.json({
      message: 'welcome to appbuilder api'
    });
  });

  router.route('/logs').post(function(req, res) {
    var log;
    log = new Log();
    log._id = mongoose.Types.ObjectId().toHexString();
    log.uuid = req.body.uuid;
    log.major = req.body.major;
    log.minor = req.body.minor;
    log.deviceId = req.body.deviceId;
    log.appKey = req.body.appKey;
    log.time = req.body.time;
    return log.save(function(error) {
      if (error) {
        res.send(error);
      }
      return res.json({
        message: 'Log created!'
      });
    });
  });

  router.route('/contacts').post(function(req, res) {
    var contact;
    contact = new Contact();
    contact._id = mongoose.Types.ObjectId().toHexString();
    contact.name = req.body.name;
    contact.email = req.body.email;
    contact.message = req.body.message;
    return contact.save(function(error) {
      if (error) {
        res.send(error);
      }
      return res.json({
        message: 'contact created!'
      });
    });
  });

  router.route('/mobile_apps/:appKey').get(function(req, res) {
    var d, getBeacons, getNotifications;
    d = Q.defer();
    getNotifications = Notification.where('appKey').equals(req.params.appKey).where('type').equals('location').lean().select('action url zone trigger message area').exec();
    getBeacons = function(notifications) {
      var beacons, zoneIds;
      d = Q.defer();
      zoneIds = _.pluck(notifications, 'zone');
      beacons = Beacon.where('zones')["in"](zoneIds).lean().select('uuid major minor zones _id').exec(function(error, result) {
        return d.resolve({
          notifications: notifications,
          beacons: result
        });
      });
      return d.promise;
    };
    return getNotifications.then(getBeacons).then(function(result) {
      var attributes, b, beacons, n, _i, _j, _len, _len1, _ref;
      _ref = result.notifications;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        beacons = _.where(result.beacons, {
          zones: [n.zone]
        });
        attributes = {
          trigger: n.trigger,
          action: n.action,
          area: n.area,
          message: n.message,
          url: n.url
        };
        for (_j = 0, _len1 = beacons.length; _j < _len1; _j++) {
          b = beacons[_j];
          if (!b.actions) {
            b = _.extend(b, {
              actions: [attributes]
            });
          } else {
            b.actions.push(attributes);
          }
        }
      }
      beacons = _.map(result.beacons, function(beacon) {
        return _.pick(beacon, ['uuid', 'major', 'minor', 'actions']);
      });
      return res.json({
        beacons: beacons
      });
    });
  });

  router.route('/push_tokens').post(function(req, res) {
    var pushToken;
    pushToken = new PushToken();
    pushToken._id = mongoose.Types.ObjectId().toHexString();
    pushToken.appKey = req.body.appKey;
    pushToken.deviceId = req.body.deviceId;
    pushToken.pushType = req.body.pushType;
    pushToken.pushToken = req.body.pushToken;
    pushToken.createdAt = new Date().valueOf();
    return pushToken.save(function(error) {
      if (error) {
        res.send(error);
      }
      return res.json({
        message: 'Push token created!'
      });
    });
  });

  app.use('/api', router);

  app.listen(port);

  console.log('running on port ' + port);

}).call(this);

//# sourceMappingURL=server.map
